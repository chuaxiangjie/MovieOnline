using Movies.Contracts;
using Orleans;
using System.Threading.Tasks;

namespace Movies.GrainClients
{
	public class MovieGrainClient(IGrainFactory grainFactory) : IMovieGrainClient
	{
		public async Task<Movie> GetAsync(string movieKey)
		{
			var movieGrain = grainFactory.GetGrain<IMovieGrain>(movieKey);
			return await movieGrain.GetAsync();
		}

		public async Task<(bool isSuccess, string reason)> CreateAsync(CreateMovieInput createMovieInput)
		{
			var movieLibraryGrain = grainFactory.GetGrain<IMovieLibraryGrain>(0);

			var movieGrain = grainFactory.GetGrain<IMovieGrain>(createMovieInput.Key);

			var movie = ToMovie(createMovieInput);

			var (isSuccess, reason) = await movieLibraryGrain.AddMovieAsync(movie, assignAutoGeneratedId: true);

			return (isSuccess, reason);
		}

		private Movie ToMovie(CreateMovieInput createMovieInput) => new Movie
		{
			Key = createMovieInput.Key,
			Name = createMovieInput.Name,
			Description = createMovieInput.Description,
			Genres = createMovieInput.Genres,
			Image = createMovieInput.Image,
			Duration = createMovieInput.Duration,
			Rating = createMovieInput.Rating
		};
	}
}